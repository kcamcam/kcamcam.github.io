<h1 id="soen" class="uk-heading-bullet">
  <a href="#soen">SOEN</a>
</h1>

<div class="cards uk-card uk-card-large uk-card-secondary uk-box-shadow-medium uk-margin">
  <div class="uk-card-body">
    <h3 class="uk-card-title uk-margin-remove-bottom">SOEN 228: System Hardware</h3>
    <p class="uk-text-justify">
      Processor structure, Data and Instructions, Instruction Set Processor (ISP) level view of computer hardware, assembly language level use. Memory systems â€” RAM and disks, hierarchy of memories. I/O organization, I/O devices and their diversity, their interconnection to CPU and Memory. Communication between computers at the physical level. Networks and computers.
    </p>
  </div>
</div>

<div class="cards uk-card uk-card-large uk-card-secondary uk-box-shadow-medium uk-margin">
  <div class="uk-card-body">
    <h3 class="uk-card-title uk-margin-remove-bottom">SOEN 287:	Web Programming</h3>
    <p class="uk-text-justify">
      Internet architecture and protocols. Web applications through clients and servers. Markup languages. Client-side programming using scripting languages. Static website contents and dynamic page generation through server-side programming. Preserving state (client-side) in web applications.
    </p>
  </div>
</div>

<div class="cards uk-card uk-card-large uk-card-secondary uk-box-shadow-medium uk-margin">
  <div class="uk-card-body">
    <h3 class="uk-card-title uk-margin-remove-bottom">SOEN 331:	Introduction to Formal Methods for Software Engineering</h3>
    <p class="uk-text-justify">
      Assertions. Static and dynamic checking. Method specification using preconditions and postconditions. Strengthening and weakening. Design by contract. Hoare logic. Invariants. Class specification using invariants. Software tools for assertion checking and verification. Reliable software development.
    </p>
  </div>
</div>

<div class="cards uk-card uk-card-large uk-card-secondary uk-box-shadow-medium uk-margin">
  <div class="uk-card-body">
    <h3 class="uk-card-title uk-margin-remove-bottom">SOEN 341:	Software Process</h3>
    <p class="uk-text-justify">
      Basic principles of software engineering. Introduction to software process models. Activities in each phase, including review activities. Working in teams: organization; stages of formation; roles; conflict resolution. Notations used in software documentation. How to review, revise, and improve software documentation.
    </p>
  </div>
</div>

<div class="cards uk-card uk-card-large uk-card-secondary uk-box-shadow-medium uk-margin">
  <div class="uk-card-body">
    <h3 class="uk-card-title uk-margin-remove-bottom">SOEN 342:	Software Requirements and Specifications</h3>
    <p class="uk-text-justify">
      Requirements engineering. Functional and non-functional requirements. Traceability. Test generation. Formal and informal specifications. Formal specification languages. Reasoning with specifications. Correctness issues. Verification.
    </p>
  </div>
</div>

<div class="cards uk-card uk-card-large uk-card-secondary uk-box-shadow-medium uk-margin">
  <div class="uk-card-body">
    <h3 class="uk-card-title uk-margin-remove-bottom">SOEN 343:	Software Architecture and Design I</h3>
    <p class="uk-text-justify">
      From requirements to design to implementation. Planned vs. evolutionary design and refactoring. Model-driven design and Unified Modelling Language (UML). Structural and behavioural design descriptions and specifications. General and domain-specific design principles, patterns and idioms. Object-oriented design concepts such as interfaces vs. abstract types, polymorphism, generics, and delegation vs. subclassing. Introduction to software architecture (styles and view models). Design quality. Design rationale. Design methodologies (e.g. based on responsibility assignment). Test-driven development.
    </p>
  </div>
</div>


<div class="cards uk-card uk-card-large uk-card-secondary uk-box-shadow-medium uk-margin">
  <div class="uk-card-body">
    <h3 class="uk-card-title uk-margin-remove-bottom">SOEN 344:	Software Architecture and Design II</h3>
    <p class="uk-text-justify">
      Architectural activities, roles, and deliverables. Architectural view models. Architectural styles (including client-server, layered, pipes-and-filters, event-based, process control) and frameworks. Architectural analysis and the interplay with requirements elicitation. Notations for expressing architectural designs, structural and behavioural specifications. From architectural design to detailed design. Domain specific architectures and design patterns. Evaluation and performance estimation of designs. Advanced object-oriented design patterns and idioms. 
    </p>
  </div>
</div>

<div class="cards uk-card uk-card-large uk-card-secondary uk-box-shadow-medium uk-margin">
  <div class="uk-card-body">
    <h3 class="uk-card-title uk-margin-remove-bottom">SOEN 345:	Software Testing, Verification and Quality Assurance</h3>
    <p class="uk-text-justify">
      Testing strategies. Specification-based vs. code-based, black-box vs. white-box, functional vs. structural testing; unit, integration, system, acceptance, and regression testing. Verification vs. validation. Test planning, design and artifacts. Introduction to software reliability and quality assurance. Formal verification methods, oracles; static and dynamic program verification.
    </p>
  </div>
</div>

<div class="cards uk-card uk-card-large uk-card-secondary uk-box-shadow-medium uk-margin">
  <div class="uk-card-body">
    <h3 class="uk-card-title uk-margin-remove-bottom">SOEN 357:	User Interface Design</h3>
    <p class="uk-text-justify">
      The human side: I/O; memory; and information processing. Interaction: mental models; human error; interaction frameworks and paradigms. Direct manipulation. User interface design: principles; standards; and guidelines. User-centred design: standards and design rationale; heuristic evaluation; iterative design; and prototyping. Task-centred design. Rationalized design: usability engineering; dialogue notations; user models; diagrammatic notations; and textual notations. Evaluation: with the user; without the user; quantitative; and qualitative. Implementation support. Help and documentation.
    </p>
  </div>
</div>

<div class="cards uk-card uk-card-large uk-card-secondary uk-box-shadow-medium uk-margin">
  <div class="uk-card-body">
    <h3 class="uk-card-title uk-margin-remove-bottom">SOEN 384:	Management, Measurement and Quality Control</h3>
    <p class="uk-text-justify">
      Organization of large software development. Roles of team members, leaders, managers, stakeholders, and users. Tools for monitoring and controlling a schedule. Financial, organizational, human, and computational resources allocation and control. Project and quality reviews, inspections, and walkthroughs. Risk management. Communication and collaboration. Cause and effects of project failure. Project management via the Internet. Quality assurance and control. 
    </p>
  </div>
</div>

<div class="cards uk-card uk-card-large uk-card-secondary uk-box-shadow-medium uk-margin">
  <div class="uk-card-body">
    <h3 class="uk-card-title uk-margin-remove-bottom">SOEN 390:	Software Engineering Team Design Project</h3>
    <p class="uk-text-justify">
      Students work in teams to design and implement a software project from requirements provided by the coordinator. Each team will demonstrate the software and prepare adequate documentation for it. In addition, each student will write an individual report.
    </p>
  </div>
</div>
